{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","setIsUrlIncorrect","useState","Math","random","toString","slice","id","touched","setToched","hasError","isInvalidUrl","setIsInvalidUrl","htmlFor","classNames","type","placeholder","event","target","onBlur","match","NewMovie","onAdd","count","setCount","emptyMovie","newMovie","setNewMovie","isUrlIncorrect","onSubmit","preventDefault","handleSubmit","disabled","App","moviesFromServer","movieList","setMovieList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71cb9266.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  required?: boolean,\n  onChange?: (newValue: string, name: string) => void,\n  setIsUrlIncorrect?: (invalid: boolean) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random().toString().slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  required = false,\n  onChange = () => {},\n  setIsUrlIncorrect = () => {},\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const [isInvalidUrl, setIsInvalidUrl] = useState(false);\n\n  const validateUrl = () => {\n    // eslint-disable-next-line max-len\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-,+=&;%@.\\w_]*)#?(?:[.,!/\\\\\\w]*))?)$/;\n\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      setIsInvalidUrl(!value.match(pattern));\n    }\n  };\n\n  if (isInvalidUrl) {\n    setIsUrlIncorrect(true);\n  } else {\n    setIsUrlIncorrect(false);\n  }\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={event => onChange(event.target.value, name)}\n          onBlur={() => {\n            setToched(true);\n            validateUrl();\n          }}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {isInvalidUrl && (\n        <p className=\"help is-danger\">{`${label} is invalid`}</p>\n      )}\n    </div>\n  );\n};\n","import { FormEvent, useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void,\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const emptyMovie = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  };\n  const [newMovie, setNewMovie] = useState(emptyMovie);\n  const [isUrlIncorrect, setIsUrlIncorrect] = useState(false);\n\n  const {\n    title, description, imgUrl, imdbUrl, imdbId,\n  } = newMovie;\n\n  const onChange = (value: string, name: string) => {\n    setNewMovie({\n      ...newMovie,\n      [name]: value,\n    });\n  };\n\n  const isSubmitDisabled = () => (\n    !title || !imgUrl || !imdbUrl || !imdbId || isUrlIncorrect\n  );\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    onAdd(newMovie);\n    setCount(() => count + 1);\n    setNewMovie(emptyMovie);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={event => handleSubmit(event)}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={onChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={onChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={onChange}\n        required\n        setIsUrlIncorrect={setIsUrlIncorrect}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={onChange}\n        required\n        setIsUrlIncorrect={setIsUrlIncorrect}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={onChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isSubmitDisabled()}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movieList, setMovieList] = useState(moviesFromServer);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movieList} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={(movie: Movie) => {\n          setMovieList([\n            ...movieList,\n            movie,\n          ]);\n        }}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}